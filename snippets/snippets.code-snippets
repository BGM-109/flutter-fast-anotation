{
  "Create to Freezed": {
    "prefix": "freezedClass",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "",
      "@freezed",
      "class $1 with _$$1 {",
      "const factory $1({",
      "}) = _$1;",
      "}"
    ],
    "description": "Basic Freezed Class"
  },
  "Create to Freezed Abstact": {
    "prefix": "freezedA-Class",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "",
      "@freezed",
      "abstract class $1 with _$$1 {",
      "}"
    ],
    "description": "Abstract Freezed Class"
  },
  "Create to Freezed With Json": {
    "prefix": "freezedClassWithJson",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class $1 with _$$1 {",
      "const factory $1({",
      "}) = _$1;",
      "",
      "factory $1.fromJson(Map<String, Object?> json)",
      "      => _$$1FromJson(json);",
      "}"
    ],
    "description": "Basic Freezed Class With Json"
  },
  "Create to Json": {
    "prefix": "jsonClass",
    "body": [
      "import 'package:json_annotation/json_annotation.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@JsonSerializable()",
      "class $1 {",
      "",
      "$1();",
      "",
      "factory $1.fromJson(Map<String, dynamic> json) => _\\$$1FromJson(json);",
      "Map<String, dynamic> toJson() => _$$1ToJson(this);",
      "}"
    ],
    "description": "Basic Json Class"
  },
  "Create to Json With Generic": {
    "prefix": "jsonClassGeneric",
    "body": [
      "import 'package:json_annotation/json_annotation.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@JsonSerializable(genericArgumentFactories: true)",
      "class $1<T> {",
      "",
      "$1();",
      "",
      "factory $1.fromJson(Map<String, dynamic> json, T Function(Object? json) fromJsonT) => _\\$$1FromJson<T>(json, fromJsonT);",
      "Map<String, dynamic> toJson(Object Function(T) toJsonT) => _\\$$1ToJson<T>(this, toJsonT);",
      "}"
    ],
    "description": "Basic Json Class with Generic"
  },
  "base retorift": {
    "prefix": "retrofitClass",
    "body": [
      "import 'package:retrofit/retrofit.dart';",
      "import 'package:dio/dio.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@RestApi()",
      "abstract class $1 {",
      "  factory $1(Dio dio, {String baseUrl}) = _$1;",
      "}"
    ],
    "description": "Basic Retrofit Class"
  },
  "named retrofit repository": {
    "prefix": "retrofitRClass",
    "body": [
      "import 'package:retrofit/retrofit.dart';",
      "import 'package:dio/dio.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@RestApi()",
      "abstract class $1Repository {",
      "  factory $1Repository(Dio dio, {String baseUrl}) = _$1Repository;",
      "}"
    ],
    "description": "Retrofit for repository patterns"
  },
  "named retrofit datesource": {
    "prefix": "retrofitDSClass",
    "body": [
      "import 'package:retrofit/retrofit.dart';",
      "import 'package:dio/dio.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@RestApi()",
      "abstract class $1DataSource {",
      "  factory $1DataSource(Dio dio, {String baseUrl}) = _$1DataSource;",
      "}"
    ],
    "description": "Retrofit for DataSource"
  },
  // Go Router Builder
  "typed go route": {
    "prefix": "goRouteDataClass",
    "body": [
      "// Don't make multiple files Manage only one file by making it part of the parent file",
      "// part of 'app_routes.dart';",
      "",
      "@TypedGoRoute<$1Route>(path: '/${1/(.)(.*)/${1:/downcase}$2/}')",
      "class $1Route extends GoRouteData {",
      "const $1Route();",
      "",
      "@override",
      "Widget build(BuildContext context, GoRouterState state) => $2();",
      "}"
    ],
    "description": "Typed Go Route"
  },
  "typed shell router": {
    "prefix": "shellRouteDataClass",
    "body": [
      "// Don't make multiple files Manage only one file by making it part of the parent file",
      "// part of 'app_routes.dart';",
      "",
      "@TypedShellRoute<$1ShellRoute>()",
      "class $1ShellRoute extends ShellRouteData {",
      "const $1ShellRoute();",
      "",
      "@override",
      "Widget build(BuildContext context, GoRouterState state, Widget navigator) => $2(child: navigator);",
      "}"
    ],
    "description": "Typed Shell Route"
  },
  "typed stateful shell router": {
    "prefix": "statefulShellRouteDataClass",
    "body": [
      "// Don't make multiple files Manage only one file by making it part of the parent file",
      "// part of 'app_routes.dart';",
      "",
      "@TypedStatefulShellRoute<$1StatefulShellRoute>(branches: [])",
      "class $1StatefulShellRoute extends StatefulShellRouteData {",
      "const $1StatefulShellRoute();",
      "",
      "@override",
      "Widget build(BuildContext context, GoRouterState state, StatefulNavigationShell navigationShell) => navigationShell;",
      "static Widget navigatorContainerBuilder(BuildContext context,",
      "StatefulNavigationShell navigationShell, List<Widget> children) {",
      "return $2(",
      "navigationShell: navigationShell,",
      "children: children,",
      ");",
      "}"
    ],
    "description": "Typed Go Route"
  },
  // Go Router End
  "class with riverpod generator provider that keepalive is true": {
    "prefix": "riverpodClassKeepAliveWithClass",
    "body": [
      "'package:riverpod_annotation/riverpod_annotation.dart';",
      "",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@Riverpod(keepAlive: true)",
      "//Press the Tap key to turn into a Pascal case.",
      "$1 ${1/(.)(.*)/${1:/downcase}$2/}($1Ref ref) {",
      " return $1();",
      "}",
      "class $1 {",
      " $1();",
      "}"
    ]
  },
  "async value widget for riverpod": {
    "prefix": "asyncvaluewidget",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class AsyncValueWidget<T> extends StatelessWidget {", // 템플릿 파라미터 추가
      "  const AsyncValueWidget({Key? key, required this.value, required this.data})",
      "      : super(key: key);",
      "  final AsyncValue<T> value;",
      "  final Widget Function(T) data;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return value.when(",
      "      data: data,",
      "      error: (e, st) => Center(child: Text(e.toString())),",
      "      loading: () => const Center(child: CircularProgressIndicator()),",
      "    );",
      "  }",
      "}"
    ]
  }
}
